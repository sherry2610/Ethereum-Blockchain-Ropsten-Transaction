let Tx = require('ethereumjs-tx').Transaction
let Web3 = require('web3');
let web3 = new Web3('https://ropsten.infura.io/v3/5ec405e20f064f31a6732f8d4ec7e61f')



let account1 = '0x13763Fa2dF396d9a3306952b37edf69da32aB705' //metmask account
let account2 = '0x2F0f0dBB90B48558e6DFDAC618865Bfa3EBbD856' //account from e:/XORD/ drive

// txHash for dummy 1 ether transaction from acc1 to acc2 -----> (https://ropsten.etherscan.io/tx/0xac06caa293e292e9fd4e8e6da8dfe545c98b5746b1acc97919e7c572877c66e1)


let privateKey1 = Buffer.from('privateKey1','hex')
let privateKey2 = Buffer.from('privateKey2','hex')


web3.eth.getBalance(account1, (err , bal) => { console.log("acc1 balance:",web3.utils.fromWei(bal,'ether')) })
web3.eth.getBalance(account2, (err , bal) => { console.log("acc2 balance:",web3.utils.fromWei(bal,'ether')) })




// web3.eth.getTransactionCount(account1, (err, txCount) => {

// //Build the transaction obj
//   let txObject = {
//     'nonce': web3.utils.toHex(txCount),
//     from: web3.utils.toHex(account1),
//     to: web3.utils.toHex(account2),
//     value: web3.utils.toHex(web3.utils.toWei('1','ether')),
//     gasLimit: web3.utils.toHex('21000'),
//     gasPrice: web3.utils.toHex(web3.utils.toWei('10','gwei'))
//   }

//   // // console.log("txObject", txObject)

//   // //Sign the transaction
//   let tx = new Tx(txObject, {chain: 'ropsten'})
//   tx.sign(privateKey1)

//   let serializedTransaction = tx.serialize()
//   let raw = '0x' + serializedTransaction.toString('hex')
  
//   // //Broadcast the transaction
//   web3.eth.sendSignedTransaction(raw, (err, txHash) => {
//     console.log("txHash : ", txHash)
//   })

// // txHash generated by final transaction is : 0xfea30cb75accd2a20bcb241d047513203598e9f73b0515d3e0fe534043664ea6

//   // console.log("err ----",err)
  

// })
